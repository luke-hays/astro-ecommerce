---
const { id, productQuantity } = Astro.props;
---

<script>
  // Using nanostore since other components are going to need the quantity state in this store
  import {
    $counts,
    incrementCount,
    decrementCount,
    getItemCount,
    updateCount,
  } from "../../stores/productCounts";
import { MAX_PRODUCT_QUANTITY } from "../../utils/constants";

  class ProductCounter extends HTMLElement {
    constructor() {
      super();

      const id = this.dataset.id;

      if (!id) return; // TODO: Consider what to do if no ID exists

      const addProduct = this.querySelector(`#increment-${id}`);
      const removeProduct = this.querySelector(`#decrement-${id}`);
      const display = this.querySelector(`#${id}-count`);

      if (!addProduct || !removeProduct || !display) return;

      addProduct.addEventListener("click", () => {
        incrementCount(id)
      });
      
      removeProduct.addEventListener("click", () => {
        decrementCount(id)
      });

      // Set a listener on the current quantity to update the display when its changed by either imported function
      $counts.subscribe((counts) => {
        const count = counts[id];
        if (count == null) return;
        display.textContent = counts[id].toString();
      });

      let initialCount = getItemCount(id);
      const initialQuantity = this.dataset.count;

      // Product either hasn't been added yet, or this state may not contain it yet
      if (initialCount === 0 && initialQuantity == null) {
        updateCount(id, 0);
      } else if (initialCount === 0 && initialQuantity != null) {
        updateCount(id, parseInt(initialQuantity));
      }
    }
  }

  customElements.define("product-counter", ProductCounter);
</script>

<product-counter data-id={id} data-count={productQuantity}>
  <sl-button id={`decrement-${id}`}>-</sl-button>
  <div class="counter" id={`${id}-count`}></div>
  <sl-button id={`increment-${id}`}>+</sl-button>
</product-counter>

<style>
  product-counter {
    display: flex;
    align-items: center;
  }

  .counter {
    height: 2.5rem;
    width: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: hsl(0, 0%, 100%);
    border-top: 1px;
    border-bottom: 1px;
    border-left: 0;
    border-right: 0;
    border-style: solid;
    border-color: hsl(240, 5%, 84%);
    box-sizing: border-box;
  }

  sl-button {
    width: 2.5rem;
    height: 2.5rem;
  }

  sl-button:first-child::part(base) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  sl-button:last-child::part(base) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
</style>
