---
import UpdateItemDialog from "./UpdateItemDialog.astro";
import Thumbnail from "./Thumbnail.astro"

import { formatNumberToCurrency } from "../../utils/currency";

const { product } = Astro.props;
---

<script>
  import "@shoelace-style/shoelace/dist/components/button/button.js";
  import "@shoelace-style/shoelace/dist/components/icon-button/icon-button.js";
  import "@shoelace-style/shoelace/dist/components/dialog/dialog.js";
  import type SlDialog from "@shoelace-style/shoelace/dist/components/dialog/dialog.js";

  import { $totalCartItems } from "../../stores/totalCartItems";
  import { $counts } from "../../stores/productCounts";
  import { formatNumberToCurrency } from "../../utils/currency";
  import { deleteCartItem } from "../../stores/cart";

  class ProductCard extends HTMLElement {
    constructor() {
      super();

      const id = this.dataset.id;
      const quantity = this.dataset.quantity;
      const price = this.dataset.price;

      const removeButton = this.querySelector(`#remove-${id}`);
      const editButton = this.querySelector(`#edit-${id}`);
      const editDialog = this.querySelector(`#edit-${id}-dialog`) as SlDialog;

      removeButton?.addEventListener("click", async () => {
        if (id && quantity) {
          removeButton.setAttribute("disabled", "true");
          removeButton.setAttribute("loading", "true");

          try {
            deleteCartItem(id);
            this.remove();
          } catch (error) {
            // TODO Render Error state
          } finally {
            removeButton.removeAttribute("disabled");
            removeButton.removeAttribute("loading");
          }
        }
      });

      editButton?.addEventListener("click", () => {
        editDialog.show();
      });

      $totalCartItems.subscribe(() => {
        const counts = $counts.get();

        const priceDisplay = this.querySelector("#price");
        if (priceDisplay && price && id) {
          const count = counts[id] ?? quantity;
          priceDisplay.textContent = formatNumberToCurrency(
            parseInt(price) * count,
          );
        }

        const quantityDisplay = this.querySelector("#quantityx");
        if (quantityDisplay && id && quantity) {
          let count = counts[id] ?? quantity;
          quantityDisplay.textContent = `x${count}`;
        }
      });
    }
  }

  customElements.define("product-card", ProductCard);
</script>

<product-card
  class="product"
  data-id={product.id}
  data-quantity={product.quantity}
  data-price={product.price}
>
  <Thumbnail product={product}/>
  <div class="product-details">
    <div>
      <div class="name">{product.name}</div>
      <div id="price" class="price">
        {formatNumberToCurrency(product.price * product.quantity)}
      </div>
    </div>

    <div class="product-actions">
      <div id="quantityx" class="quantity">x{product.quantity}</div>
      <div class="controls">
        <sl-button id={`edit-${product.id}`} size="small">Edit</sl-button>
        <sl-button id={`remove-${product.id}`} size="small">Remove</sl-button>
      </div>
    </div>
  </div>
  <UpdateItemDialog product={product}/>
</product-card>

<style>
  .product {
    display: flex;
    gap: 1rem;
    border: 1px solid var(--color-text-ink-200);
    padding: 1rem 2rem;
    border-radius: 8px;
    background-color: white;
  }

  .product-details {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 0.5rem;
    flex-grow: 1;
  }

  .name {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--color-text-ink-500);
  }

  .quantity {
    color: var(--color-text-ink-300);
  }

  .price {
    color: var(--color-text-ink-300);
  }

  .product-actions {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
  }

  .controls {
    display: flex;
    gap: 0.25rem;
    flex-wrap: nowrap;
  }
</style>
