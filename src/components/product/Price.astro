---
import { formatNumberToCurrency } from "../../utils/currency";
const { product } = Astro.props;
---

<script>
  import { getCartItem } from "../../stores/cart";
  import { $products } from "../../stores/products";
  import { formatNumberToCurrency } from "../../utils/currency";

  class PriceDisplay extends HTMLElement {
    constructor() {
      super();

      const id = this.dataset.id;
      const skeletons = this.querySelectorAll("sl-skeleton");
      const text = this.querySelector("#calculated-price-text");
      const prices = this.querySelector("#prices");

      if (id && text && skeletons) {
        $products.subscribe((products) => {
          if (!products || !(id in products)) {
            console.log(this.dataset.cost, this.dataset.quantity);
            const price = this.dataset.price ?? "0";
            const quantity = this.dataset.quantity ?? "0";
            text.textContent = `${formatNumberToCurrency(parseFloat(price) * parseInt(quantity))}`;

            skeletons.forEach((skeleton) => {
              skeleton.classList.add("finished");
            });

            return;
          }

          const price = products[id];
          const quantity = getCartItem(id);
          text.textContent = `${formatNumberToCurrency(price * quantity)}`;

          // debugger

          skeletons.forEach((skeleton) => {
            skeleton.classList.add("finished");
          });

          // debugger
        });
      }

      skeletons.forEach((skeleton) => {
        skeleton?.addEventListener("transitionend", () => {
          // debugger
          skeleton.remove();
          // debugger
          if (!prices?.classList.contains("finished")) {
            prices?.classList.add("finished");
          }
        });
      });
    }
  }

  customElements.define("price-display", PriceDisplay);
</script>

<price-display
  data-id={product.id}
  data-price={product.price}
  data-quantity={product.quantity}
>
  <div>
    <sl-skeleton effect="sheen"></sl-skeleton>
    <sl-skeleton effect="sheen"></sl-skeleton>
    <div id="prices">
      <p id="total-label"><strong>Total</strong>:</p>
      <p id="calculated-price"><span id="calculated-price-text"></span></p>
      <p><strong>Original</strong>:</p>
      <p>{product.formattedPrice}</p>
    </div>
  </div>
</price-display>

<style>
  price-display {
    color: var(--color-text-ink-300);
    margin-top: 0.25rem;
  }

  sl-skeleton {
    width: 10rem;
    height: 1rem;
  }

  sl-skeleton.finished {
    width: 0;
    transition: 0.4s width;
  }

  #prices {
    display: grid;
    grid-template-areas:
      "total-label total-calculation"
      "original-label original-calcuation";
    grid-template-columns: 4rem 1fr;
    opacity: 0;
  }

  #prices.finished {
    opacity: 1;
    transition: 0.4s opacitiy;
  }

  #total-label {
    grid-area: total-label;
  }

  #calculated-price {
    grid-area: total-calculation;
  }

  p {
    margin: 0;
    font-size: 0.9rem;
    height: 1rem;
  }

  div {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .tab {
    display: inline-block;
    margin-left: 1.5rem;
  }
</style>
