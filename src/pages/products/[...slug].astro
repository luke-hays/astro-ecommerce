---
// TODO: Get User's initial quantiy of this product
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

import BaseLayout from "../../layouts/BaseLayout.astro";
import ProductCounter from "../../components/product/ProductCounter.astro";
import Breadcrumb from "../../components/shared/Breadcrumb.astro";

import { getImages } from "../../scripts/images";
import { getProduct } from "../../scripts/product";
import { buildCategoryBreadcrumbs } from "../../scripts/routes";

// The product name is the slug
const { slug } = Astro.params;

const products = await getCollection("products");
const categories = await getCollection("categories");
const images = getImages();

const product = getProduct({ products, id: slug, images });

if (!product) return Astro.redirect("/404");

const breadcrumbs = buildCategoryBreadcrumbs(categories, product.category);

let cart: Cart = {}
if (Astro.cookies.has("cart")) {
  const sessionId = Astro.cookies.get("cart")?.value;

  if (sessionId) {
    try {
      const url = new URL(`/api/cart?id=${sessionId}`, Astro.url);
      const response = await fetch(url);
      cart = JSON.parse(await response.json());
    } catch (error) {
      console.error(error);
    }
  }
}
---

<script>
  import "@shoelace-style/shoelace/dist/components/button/button.js";
  import { getItemCount } from "../../stores/productCounts";
  import { updateCart } from "../../stores/cart";

  const addToCartButton = document.getElementById("add-to-cart");
  const id = addToCartButton?.dataset.id;

  if (addToCartButton && id) {
    addToCartButton.addEventListener("click", async () => {
      addToCartButton.setAttribute("disabled", "true");
      addToCartButton.setAttribute("loading", "true");

      try {
        updateCart(id, getItemCount(id));
      } catch (error) {
        // TODO Render Error state
        console.log(error)
      } finally {
        addToCartButton.removeAttribute("disabled");
        addToCartButton.removeAttribute("loading");
      }
    });
  }
</script>

<BaseLayout>
  <div class="product">
    <div class="product-layout">
      <div class="breadcrumbs">
        <Breadcrumb routes={breadcrumbs} />
      </div>
      <div class="img-container">
        <Image src={product.image()} alt={product.name} />
      </div>
      <section>
        <h2>{product.name}</h2>
        <p>{product.formattedPrice}</p>
        <p>{product.description}</p>
        <div class="product-controls">
          <ProductCounter id={product.id} productQuantity={cart[product.id]}/>
          <sl-button data-id={product.id} id="add-to-cart">
            Add to cart
          </sl-button>
        </div>
      </section>
    </div>
  </div>
</BaseLayout>

<style>
  img {
    max-width: 100%;
    height: 100%;
    object-fit: cover;
    grid-area: image;
  }

  section {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    grid-area: details;
  }

  h2 {
    margin: 0;
    color: var(--color-text-ink-500);
  }

  p {
    margin: 0;
    color: var(--color-text-ink-400);
  }

  .breadcrumbs {
    grid-area: breadcrumbs;
  }

  .img-container {
    border-radius: 8px;
    overflow: hidden;
    height: 30rem;
    width: 100%;
    max-width: 25rem;
  }

  .product-layout {
    display: grid;
    grid-template-areas:
      "breadcrumbs"
      "image"
      "details";
    grid-template-columns: 1fr;
    margin: 1.5rem 2rem;
    gap: 0.5rem;
  }

  #add-to-cart {
    width: 10rem;
  }

  .product-controls {
    display: flex;
    gap: 0.5rem;
  }

  @media (min-width: 768px) {
    .product {
      display: flex;
      justify-content: center;
    }

    .product-layout {
      display: grid;
      grid-template-areas:
        "breadcrumbs breadcrumbs"
        "image details";
      grid-template-columns: minmax(25rem, 35rem) 1fr;
      margin: 1.5rem 2rem;
      gap: 0.5rem;
    }

    .img-container {
      width: 100%;
      max-width: 35rem;
      height: 40rem;
    }

    section {
      padding: 1rem 2rem;
    }
  }

  @media (min-width: 1536px) {
    h2 {
      font-size: x-large;
    }

    p {
      font-size: large;
    }
  }
</style>
