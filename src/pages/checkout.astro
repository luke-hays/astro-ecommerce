---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";

import BaseLayout from "../layouts/BaseLayout.astro";

import { formatNumberToCurrency } from "../scripts/currency";
import { getImages } from "../scripts/images";
import { getAllProductsInCart } from "../scripts/product";
import { turso } from "../turso";

const productCollection = await getCollection("products");
const images = getImages();

let cart = {} as Cart;

if (Astro.cookies.has("cart")) {
  const sessionId = Astro.cookies.get("cart")?.value

  if (sessionId) {
    const recordResponse = await turso.execute({
      sql: 'SELECT * FROM cart WHERE session_id = ?;',
      args: [sessionId]
    })

    if (recordResponse.rows.length > 0) {
      cart = JSON.parse(recordResponse.rows[0].items as any) as Cart;
    }
  }
}

const products = getAllProductsInCart(productCollection, images, cart)
---

<script>
  import "@shoelace-style/shoelace/dist/components/button/button.js";
  import "@shoelace-style/shoelace/dist/components/icon-button/icon-button.js";
  import "@shoelace-style/shoelace/dist/components/dialog/dialog.js";

  const removeButtons = document.getElementsByClassName('remove-button')
  for (const button of removeButtons) {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLElement
      const id = target.dataset.productid

      if (e.target) {
        const productToRemove = document.getElementById(`${id}-product`) 
        if (productToRemove) productToRemove.remove()
      }
    })
  }

</script>

<BaseLayout>
  <div class="checkout-layout">
    <div class="checkout-container">
      <h1>Your cart</h1>
      {
        products.map((product) => {
          return (
            <div class="product" id={`${product.id}-product`}>
              <div class="product-image">
                <Image src={product.image()} alt={product.name} />
              </div>
              <div class="product-details">
                <div>
                  <div class="name">{product.name}</div>
                  <div class="price">
                    {formatNumberToCurrency(product.price * product.quantity)}
                  </div>
                </div>

                <div class="product-actions">
                  <div class="quantity">x{product.quantity}</div>
                  <div class="controls">
                    <sl-button data-productid={product.id} class="edit-button" variant="text" size="small">Edit</sl-button>
                    <sl-button data-productid={product.id} class="remove-button" variant="text" size="small">Remove</sl-button>
                  </div>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
  <sl-dialog id="edit-dialog" label="Edit Items">

  </sl-dialog>
  <sl-dialog id="remove-dialog" label="Remove Items?">
    
  </sl-dialog>
</BaseLayout>

<style>
  h1 {
    margin: 1rem 0 0 0;
    color: var(--color-text-ink-500);
  }

  .checkout-layout {
    display: flex;
    justify-content: center;
  }

  .checkout-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin: 1rem 2rem;
    min-width: 30rem;
    width: 100%;
    max-width: 40rem;
  }

  .product {
    display: flex;
    gap: 1rem;
    border: 1px solid var(--color-text-ink-200);
    padding: 1rem 2rem;
    border-radius: 8px;
    background-color: white;
  }

  .product-details {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 0.5rem;
    flex-grow: 1;
  }

  .product-image {
    border-radius: 4px;
    height: 10rem;
    overflow: hidden;
  }

  .product-image > img {
    width: 100%;
    height: inherit;
    object-fit: cover;
  }

  .name {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--color-text-ink-500);
  }

  .quantity {
    color: var(--color-text-ink-300);
  }

  .price {
    color: var(--color-text-ink-300);
  }

  .product-actions {
    display: flex;
    align-items: center;
    justify-content: space-between
  }
</style>
